{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btntext","setBtnText","className","style","id","type","onClick","border","Navbar","props","mode","to","title","AboutText","toggleMode","role","htmlFor","TextForm","text","setText","heading","value","onChange","event","console","log","target","showAlert","rows","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","AboutHome","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","background","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6313d1df.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n    const [myStyle, setMyStyle] = useState( {\r\n        color: 'black',\r\n        backgroundColor:'white'\r\n        \r\n    })\r\n    const [btntext, setBtnText] = useState(\"Enable Dark Mode\")\r\n    \r\n  const toggleStyle=()=>{\r\n      if(myStyle.color==='black'){\r\n          setMyStyle( {\r\n            color: 'white',\r\n            backgroundColor:'black',\r\n            border: '1px solid white'\r\n        })\r\n        setBtnText(\"Enable Light Mode\")\r\n      } \r\n      else{\r\n        setMyStyle( {\r\n            color: 'black',\r\n            backgroundColor:'white',\r\n            border: '1px solid black'\r\n        })\r\n      }\r\n      setBtnText(\"Enable Dark Mode\")\r\n   }\r\n  return (\r\n    <div className=\"container\" style={myStyle}>\r\n        <h2 className=\"my-3\">About Us</h2>\r\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\" style={myStyle}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\" style={myStyle}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\" style={myStyle}\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" >\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\" style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\" style={myStyle}\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container\">\r\n\r\n      <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary\">{btntext}</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <Link className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.AboutText}\r\n              </Link>\r\n            </Link>\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enalble Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  AboutText: PropTypes.string,\r\n  AboutHome: PropTypes.string,\r\n};\r\nNavbar.defaultProps = {\r\n  title: \"set title here\",\r\n  AboutText: \"set text here\",\r\n  AboutHome: \"set home here\",\r\n};\r\n","import React, {useState} from \"react\";\r\nexport default function TextForm(props) {\r\n    const handleUpClick=()=>{\r\n        console.log(\"Uppercase was clicked\" + text);\r\n        let newText= text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"converted to upperCase\", \"success\");\r\n    }\r\n    const handleLoClick=()=>{\r\n       // console.log(\"Uppercase was clicked\" + text);\r\n        let newText= text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"converted to LowerCase\", \"success\");\r\n    }\r\n    const handleClearClick=()=>{\r\n       // console.log(\"Uppercase was clicked\" + text);\r\n        let newText= '';\r\n        setText(newText)\r\n        props.showAlert(\"Text is cleared\", \"success\");\r\n    }\r\n    const handleOnChange=(event)=>{\r\n        console.log(\"on change\");\r\n        setText(event.target.value);\r\n        props.showAlert(\"All extra spaces is removed \", \"success\");\r\n\r\n    }\r\n    const handleCopy = () =>{\r\n        var text=document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text is copied\", \"success\");\r\n    }\r\n    const handleExtraSpaces =() =>\r\n    {\r\n        let newText =text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n    }\r\n    const [text, setText] = useState('Enter text here');\r\n\r\n  return (\r\n      <>\r\n    <div className=\"container\"  style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n      <h1>{props.heading} </h1>\r\n      <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to upper case</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to lower case</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>clear text</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>copy text</button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Exta Text</button>\r\n    </div>\r\n    <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n        <h2>your text summary</h2>\r\n        <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n        <p> {0.008 *   text.split(\" \").length} minutes read</p>\r\n        <h2>preview</h2>\r\n        <p>{text.length>0?text:\"Enter something in the textBox to preview it here\"}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n}\r\n\r\n  return (\r\n\r\n  props.alert && <div\r\n      className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n      role=\"alert\"\r\n    >\r\n             <strong>{capitalize (props.alert.type)}</strong> {props.alert.msg} \r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2500);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.background = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n      // setInterval(() => {\n      //   document.title= 'TextUtils is Amazing';\n      //   }, 2000);\n      // setInterval(() => {\n      //   document.title= 'Install TextUtils Now';\n      //   }, 1500);\n    } else {\n      setMode(\"light\");\n      document.body.style.background = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n  return (\n    <>\n      <Router>\n        <Navbar\n          title=\"Textutils\"\n          AboutText=\"About Us\"\n          AboutHome=\"Home\"\n          mode={mode}\n          toggleMode={toggleMode}\n        />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n\n            <Route exact path=\"/\">\n              <TextForm\n                showAlert={showAlert}\n                heading=\"Enter the text to analyze\"\n                mode={mode}\n              />\n              {/* <About/> */}\n            </Route>\n          </Switch>\n\n         \n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}